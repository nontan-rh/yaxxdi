#include <cstddef>
#include <cstdint>

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include <cxxopts.hpp>
#include <nlohmann/json.hpp>

#include "name.hpp"
#include "spec.hpp"

using nlohmann::json;

using namespace yaxxdi;

void generate_header(std::ostream &o, const Spec &spec) {
    const auto find_function_name = get_find_function_name(spec);

    o << "//" << std::endl;
    o << "// generated by yaxxdi" << std::endl;
    o << "//" << std::endl;
    o << std::endl;
    o << "#ifndef " << spec.include_guard << std::endl;
    o << "#define " << spec.include_guard << std::endl;
    o << std::endl;
    o << "#ifdef __cplusplus" << std::endl;
    o << "#include <cstddef>" << std::endl;
    o << "#include <cstdint>" << std::endl;
    o << "#else" << std::endl;
    o << "#include <stddef.h>" << std::endl;
    o << "#include <stdint.h>" << std::endl;
    o << "#endif // __cplusplus" << std::endl;
    o << std::endl;
    o << "#ifdef __cplusplus" << std::endl;
    o << "extern \"C\" {" << std::endl;
    o << "#endif // __cplusplus" << std::endl;
    o << std::endl;
    o << "int " + find_function_name + "(const char* id, const "
      << spec.variable_type << "** data, size_t *size);" << std::endl;
    o << std::endl;
    o << "#ifdef __cplusplus" << std::endl;
    o << "}" << std::endl;
    o << "#endif // __cplusplus" << std::endl;
    o << std::endl;
    o << "#endif // " << spec.include_guard << std::endl;
}

int main(int argc, char *argv[]) {
    cxxopts::Options options("yaxxdi-gen-header",
                             "C Header Generator of Yet Another `xxd -i'");
    options.add_options()                                           //
        ("o,output", "Output header file path",
         cxxopts::value<std::string>()->default_value("-")) //
        ("help", "Print help")                              //
        ;
    const auto args = options.parse(argc, argv);
    if (args.count("help")) {
        std::cout << options.help() << std::endl;
        return 0;
    }

    if (argc != 2) {
        std::cout << options.help() << std::endl;
        return 1;
    }
    std::string spec_path = argv[1];

    Spec spec;
    {
        json j;
        if (spec_path == "-") {
            std::cin >> j;
        } else {
            std::ifstream ifs(spec_path);
            if (!ifs) {
                std::cout << "failed to open spec file: " << spec_path
                          << std::endl;
            }
            ifs >> j;
        }
        spec = j;
    }

    {
        const auto header_path_str = args["output"].as<std::string>();
        if (header_path_str == "-") {
            generate_header(std::cout, spec);
        } else {
            std::ofstream ofs(header_path_str);
            if (!ofs) {
                std::cout << "failed to open output source file: "
                          << header_path_str << std::endl;
                return 1;
            }

            generate_header(ofs, spec);
        }
    }

    return 0;
}
